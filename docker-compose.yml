version: "3.8"

volumes:
  order-service-mysql-volume:
  inventory-service-mysql-volume:

services:
  order-service-mysql:
    image: mysql:8.3
    container_name: order-service-mysql-container
    restart: always
    environment:
      MYSQL_DATABASE: order_service
      MYSQL_USER: order_service_username
      MYSQL_PASSWORD: order_service_password
      MYSQL_ROOT_PASSWORD: root
    ports:
      - 3306:3306
    volumes:
      - order-service-mysql-volume:/var/lib/mysql

  order-service:
    image: order-service-image
    container_name: order-service-container
    restart: always
    depends_on:
      - order-service-mysql
      - discovery-service
      - api-gateway
      - kafka
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://order-service-mysql:3306/order_service
      SPRING_DATASOURCE_USERNAME: order_service_username
      SPRING_DATASOURCE_PASSWORD: order_service_password

  inventory-service-mysql:
    image: mysql:8.3
    container_name: inventory-service-mysql-container
    restart: always
    environment:
      MYSQL_DATABASE: inventory_service
      MYSQL_USER: inventory_service_username
      MYSQL_PASSWORD: inventory_service_password
      MYSQL_ROOT_PASSWORD: root
    ports:
      - 3307:3306
    volumes:
      - inventory-service-mysql-volume:/var/lib/mysql

  inventory-service:
    image: inventory-service-image
    container_name: inventory-service-container
    restart: always
    depends_on:
      - inventory-service-mysql
      - discovery-service
      - api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://inventory-service-mysql:3306/inventory_service
      SPRING_DATASOURCE_USERNAME: inventory_service_username
      SPRING_DATASOURCE_PASSWORD: inventory_service_password

  discovery-service:
    image: discovery-service-image
    container_name: discovery-service-container
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8761
    ports:
      - 8761:8761

  api-gateway:
    image: api-gateway-image
    container_name: api-gateway-container
    depends_on:
      - discovery-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
    ports:
      - 8080:8080

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-container
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-container
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - 9092:9092

  notification-service:
    image: notification-service-image
    container_name: notification-service-container
    restart: always
    depends_on:
      - discovery-service
      - api-gateway
      - kafka
    environment:
      SPRING_PROFILES_ACTIVE: docker

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus-container
    restart: always
    depends_on:
      - order-service
      - inventory-service
      - notification-service
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana-oss:10.0.12
    container_name: grafana-container
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    links:
      - prometheus:prometheus
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/var/lib/grafana